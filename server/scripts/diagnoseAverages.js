require('dotenv').config();

async function diagnoseAverages() {
    console.log('üîç DIAGN√ìSTICO DEL SISTEMA DE PROMEDIOS\n');
    console.log('=' .repeat(60));

    try {
        // 1. Verificar variables de entorno
        console.log('1Ô∏è‚É£ Verificando variables de entorno...');
        const requiredEnvVars = [
            'DB_HOST',
            'DB_WRITER_USER', 
            'DB_WRITER_PASSWORD',
            'DB_READER_USER',
            'DB_READER_PASSWORD',
            'DB_NAME'
        ];

        requiredEnvVars.forEach(varName => {
            const value = process.env[varName];
            if (value) {
                console.log(`   ‚úÖ ${varName}: ${varName.includes('PASSWORD') ? '***' : value}`);
            } else {
                console.log(`   ‚ùå ${varName}: NO DEFINIDA`);
            }
        });

        // 2. Verificar configuraci√≥n de base de datos
        console.log('\n2Ô∏è‚É£ Verificando configuraci√≥n de base de datos...');
        const { writerPool, readerPool } = require('../config/database');
        
        if (writerPool) {
            console.log('   ‚úÖ Writer pool creado');
        } else {
            console.log('   ‚ùå Writer pool NO creado');
        }
        
        if (readerPool) {
            console.log('   ‚úÖ Reader pool creado');
        } else {
            console.log('   ‚ùå Reader pool NO creado');
        }

        // 3. Probar conexi√≥n a la base de datos
        console.log('\n3Ô∏è‚É£ Probando conexi√≥n a la base de datos...');
        if (readerPool) {
            try {
                const connection = await readerPool.getConnection();
                console.log('   ‚úÖ Conexi√≥n a base de datos exitosa');
                
                // Verificar tablas
                const [tables] = await connection.query('SHOW TABLES');
                console.log(`   üìä Tablas disponibles: ${tables.length}`);
                tables.forEach(table => {
                    const tableName = Object.values(table)[0];
                    console.log(`      - ${tableName}`);
                });
                
                // Verificar tabla de configuraci√≥n
                try {
                    const [configRows] = await connection.query('SELECT COUNT(*) as count FROM configuracion_variables_estacion');
                    console.log(`   üìã Configuraciones: ${configRows[0].count} registros`);
                } catch (error) {
                    if (error.code === 'ER_NO_SUCH_TABLE') {
                        console.log(`   üìã Configuraciones: Tabla no existe (usando configuraci√≥n por defecto)`);
                    } else {
                        console.log(`   ‚ùå Error consultando configuraci√≥n: ${error.message}`);
                    }
                }
                
                // Verificar tabla de datos
                const [dataRows] = await connection.query('SELECT COUNT(*) as count FROM datos');
                console.log(`   üìä Datos: ${dataRows[0].count} registros`);
                
                // Verificar tabla de promedios
                const [avgRows] = await connection.query('SELECT COUNT(*) as count FROM promedios_diarios');
                console.log(`   üìà Promedios: ${avgRows[0].count} registros`);
                
                connection.release();
            } catch (error) {
                console.log(`   ‚ùå Error conectando a la base de datos: ${error.message}`);
            }
        }

        // 4. Probar inicializaci√≥n del AverageService
        console.log('\n4Ô∏è‚É£ Probando inicializaci√≥n del AverageService...');
        try {
            const AverageService = require('../services/averageService');
            const averageService = new AverageService();
            console.log('   ‚úÖ AverageService inicializado correctamente');
            
            // Probar obtenci√≥n de configuraci√≥n
            const configuracion = await averageService.obtenerConfiguracionVariables();
            console.log(`   üìã Configuraci√≥n obtenida: ${configuracion.length} variables`);
            
        } catch (error) {
            console.log(`   ‚ùå Error inicializando AverageService: ${error.message}`);
        }

        // 5. Probar inicializaci√≥n del AverageController
        console.log('\n5Ô∏è‚É£ Probando inicializaci√≥n del AverageController...');
        try {
            const AverageController = require('../controllers/averageController');
            const averageController = new AverageController();
            
            if (averageController.averageService) {
                console.log('   ‚úÖ AverageController inicializado correctamente');
            } else {
                console.log('   ‚ùå AverageController NO tiene averageService');
            }
            
        } catch (error) {
            console.log(`   ‚ùå Error inicializando AverageController: ${error.message}`);
        }

        console.log('\n' + '=' .repeat(60));
        console.log('üéØ DIAGN√ìSTICO COMPLETADO');

    } catch (error) {
        console.error('‚ùå Error en diagn√≥stico:', error);
    }
}

// Ejecutar diagn√≥stico
diagnoseAverages()
    .then(() => {
        console.log('\n‚úÖ Diagn√≥stico completado');
        process.exit(0);
    })
    .catch((error) => {
        console.error('\n‚ùå Error en diagn√≥stico:', error);
        process.exit(1);
    }); 